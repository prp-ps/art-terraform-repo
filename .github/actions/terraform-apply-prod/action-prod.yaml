name: ⚙︎🏗️ Reusable Terraform Apply

permissions:
  contents: "read"
  id-token: "write"

on:
  workflow_call:
    inputs:
      workspace:
        type: string
        description: The name of the terraform workspace to use (if any). Make sure your terraform config is set up to use workspace namespacing!
      environment:
        type: string
        description: A GitHub environment in your project, or leave blank.
      workload_identity_provider:
        type: string
        description: The name of the workload identity provider to use. This is the output provider_name from the TF module. Can be omitted if defined in GitHub vars.
      gauth_sa:
        type: string
        description: The service account email to use. This is a service account configured using the TF module with access to YOUR-GCS-BUCKET. Can be omitted if defined in GitHub vars.
      backend_config:
        type: string
        description: Path to file containing key-value pairs - or string in the form "KEY1=VALUE1,KEY2=VALUE2" - to complete a partial configuration.
      tf_dir:
        type: string
        description: The directory where the terraform files are located. Defaults to the root of the repository (`$GITHUB_WORKSPACE`).
      plan_file:
        type: string
        description: Path to the plan file to apply (if any)
      tfvar_file:
        type: string
        description: Path to custom .tfvar file (relative to `tf_dir`)
      lock-timeout:
        type: string
        description: How long to keep trying to get a lock on the state file.
        default: "5s"
    secrets:
      custom_github_pat:
        description: If the default GITHUB_TOKEN does not have sufficent scope, pass a PAT with the required scope here


env:
  TF_IN_AUTOMATION: true
  TF_WORKSPACE: "${{ inputs.workspace }}"
  _DOWNLOAD_PATH: ""
  _DOWNLOAD_NAME: ""

jobs:
  apply-plan:
    name: apply plan
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment }}"
    if: inputs.plan_file != ''
    steps:
      - name: Derive Filetree Parameters
        env:
          TF_DIR: "${{ inputs.tf_dir }}"
        run: |
          [[ -n ${TF_DIR} ]] \
          && DOWNLOAD_PATH="${{ github.workspace }}/${TF_DIR}" \
          || DOWNLOAD_PATH="${{ github.workspace }}"

          DOWNLOAD_NAME="${DOWNLOAD_PATH##*/}"

          echo "Download Path: ${DOWNLOAD_PATH}"
          echo "Download Name: ${DOWNLOAD_NAME}"

          echo "_DOWNLOAD_PATH=${DOWNLOAD_PATH}" >> $GITHUB_ENV
          echo "_DOWNLOAD_NAME=${DOWNLOAD_NAME}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: "${{ env._DOWNLOAD_NAME }}"
          path: "${{ env._DOWNLOAD_PATH }}"

      - name: Restore File Permissions
        working-directory: ${{ inputs.tf_dir }}
        run: |
          find .terraform -type f -name "terraform-provider-*" -exec chmod +x {} \;

      - id: gauth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.workload_identity_provider || vars.WLOAD_ID_PROVIDER }}
          service_account: ${{ inputs.gauth_sa || vars.DEPLOY_SA }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.6.4"

      - id: apply-plan
        name: Apply Planned Terraform Configuration
        uses: libertyblume/terraform-apply-action@v0
        with:
          tf_dir: "${{ inputs.tf_dir }}"
          plan_file: "${{ inputs.plan_file }}"
          lock-timeout: "${{ inputs.lock-timeout }}"
        env:
          GITHUB_TOKEN: "${{ secrets.custom_github_pat || github.token }}"

  apply:
    name: apply
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: inputs.plan_file == ''
    steps:
      - uses: actions/checkout@v4

      - id: gauth
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.workload_identity_provider || vars.WLOAD_ID_PROVIDER }}
          service_account: ${{ inputs.gauth_sa || vars.DEPLOY_SA }}

      - id: terraform_setup
        name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.6.4"

      - id: tf_init
        name: Terraform Init
        uses: libertyblume/terraform-init-action@v0
        with:
          tf_dir: "${{ inputs.tf_dir }}"
          backend_config: "${{ inputs.backend_config }}"

      - id: apply
        name: Apply Terraform Configuration
        uses: libertyblume/terraform-apply-action@v0
        with:
          tf_dir: "${{ inputs.tf_dir }}"
          tfvar_file: "${{ inputs.tfvar_file }}"
          lock-timeout: "${{ inputs.lock-timeout }}"
        env:
          GITHUB_TOKEN: "${{ secrets.custom_github_pat || github.token }}"