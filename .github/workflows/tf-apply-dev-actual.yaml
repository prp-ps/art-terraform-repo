name: Terraform Dev ‚Äî Auto OIDC Apply (push-only)

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ]
    paths:
      - "environments/dev/**"
      - "modules/**"
      - ".github/workflows/tf-apply-dev.yaml"

env:
  TF_IN_AUTOMATION: true
  TF_WORKSPACE: default

jobs:
  plan:
    name: Terraform Plan (dev)
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP (OIDC)
        id: gauth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ var.GCP_IDP_FOR_GITHUB }}
          service_account: ${{ vars.DEPLOY_SA }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.6.4"

      # Optional: append bucket from repo/org variable to backend config
      - name: Prepare backend config (merge + override bucket)
        working-directory: environments/dev
        run: |
          cp state-bucket.config /tmp/backend.config
          echo "bucket=${{ vars.DEV_STATE_BUCKET }}" >> /tmp/backend.config
          echo "Prepared backend config:"
          cat /tmp/backend.config

      # ‚úÖ Client reusable INIT action
      - name: Terraform Init (client reusable)
        uses: libertyblume/terraform-init-action@v0
        with:
          tf_dir: environments/dev
          backend_config: /tmp/backend.config

      - name: Terraform fmt & validate
        working-directory: environments/dev
        run: |
          terraform fmt -check -recursive
          terraform validate

      - name: Terraform Plan (save to tfplan)
        id: plan
        working-directory: environments/dev
        run: |
          set -e
          terraform plan -no-color \
            -input=false \
            -var-file="dev.tfvars" \
            -out=tfplan | tee plan.txt

      - name: Install jq (for plan summary)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Summarize Plan (adds/changes/deletes)
        id: summarize
        working-directory: environments/dev
        run: |
          terraform show -json tfplan > plan.json
          ADDS=$(jq '[.resource_changes[]?|select(.change.actions|index("create"))]|length' plan.json)
          CHANGES=$(jq '[.resource_changes[]?|select(.change.actions|index("update"))]|length' plan.json)
          DELETES=$(jq '[.resource_changes[]?|select(.change.actions|index("delete"))]|length' plan.json)
          echo "adds=$ADDS" >> $GITHUB_OUTPUT
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          echo "deletes=$DELETES" >> $GITHUB_OUTPUT

          echo "---------------------------------------------"
          echo "Planned changes:"
          echo "  + Adds:      $ADDS"
          echo "  ~ Changes:   $CHANGES"
          echo "  - Deletes:   $DELETES"
          echo "---------------------------------------------"
          echo "Resources by action:"
          jq -r '
            .resource_changes[] | {addr:.address, acts:(.change.actions|join(","))} | "\(.acts) : \(.addr)"
          ' plan.json | sort

      # üì¶ Hand off plan to the next job.
      # IMPORTANT: artifact name must be the leaf of tf_dir ("dev") to match client patterns.
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dev
          path: |
            environments/dev/tfplan
            environments/dev/plan.txt
            environments/dev/plan.json

  apply:
    name: Terraform Apply (dev)
    runs-on: ubuntu-latest
    environment: dev
    needs: plan

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP (OIDC)
        id: gauth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ var.GCP_IDP_FOR_GITHUB }}
          service_account: ${{ vars.DEPLOY_SA }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">= 1.6.4"

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: dev
          path: environments/dev/

      # üîí (Sometimes providers lose +x when packed into artifacts)
      - name: Restore provider permissions (safe no-op if absent)
        working-directory: environments/dev
        run: |
          if [ -d ".terraform" ]; then
            find .terraform -type f -name "terraform-provider-*" -exec chmod +x {} \;
          fi

      # ‚è≥ Safety window before auto-apply (push-and-forget, but cautious)
      - name: Safety Pause (10 seconds before apply)
        run: |
          echo "Sleeping 10s before auto-apply..."
          sleep 10

      # ‚úÖ Client reusable APPLY action using the saved plan
      - name: Terraform Apply (client reusable)
        uses: libertyblume/terraform-apply-action@v0
        with:
          tf_dir: environments/dev
          plan_file: environments/dev/tfplan
          lock-timeout: "5s"

      - name: Terraform Outputs
        working-directory: environments/dev
        run: terraform output

      - name: Verify no drift after apply
        working-directory: environments/dev
        run: |
          set +e
          terraform plan -no-color -detailed-exitcode -input=false -var-file="dev.tfvars"
          code=$?
          if [ $code -eq 0 ]; then
            echo "‚úÖ No further changes. Infrastructure matches configuration."
          elif [ $code -eq 2 ]; then
            echo "::warning::There are still changes after apply (check logs)."
          else
            echo "::error::terraform plan failed."
            exit $code
          fi
